`default_nettype none
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top(

    //////////// CLOCK //////////

    input                           CLOCK_50,

   

   
    output             [9:0]        LEDR,

    //////////// KEY //////////
 
    input              [3:0]        KEY,

    //////////// SW //////////
    input              [9:0]        SW,

    //////////// SEG7 //////////
    output             [6:0]        HEX0,
    output             [6:0]        HEX1,
    output             [6:0]        HEX2,
    output             [6:0]        HEX3

    //////////// Uart to USB //////////

 
 
);

localparam int DW = 16;





//mem
logic [10:0] ram_addr; //address
logic [15:0] ram_data_in; // data_in
logic [15:0] ram_data_out;//data_out
logic        ram_wren;//flag





//=======================================================
//  REG/WIRE declarations
//=======================================================
wire clk;
wire resetn;
wire configure;
wire up;
wire down;
wire ready;
wire [15:0] bcd_out;
wire [15:0] bin_in;

wire tdi;
wire tdo;              
wire [1:0] ir_in;
// wire ir_out;
wire virtual_state_cdr;
wire virtual_state_sdr;
// wire virtual_state_e1d;
// wire virtual_state_pdr;
// wire virtual_state_e2d;
wire virtual_state_udr;
// wire virtual_state_cir;
// wire virtual_state_uir;
wire tck;              

wire [(DW-1):0] jtag_data;
logic [(DW-1):0] counter;


//=======================================================
//  Structural coding
//=======================================================
assign  bin_in = counter;
assign  clk = CLOCK_50; 
assign resetn = SW[0];


assign  configure = ~KEY[0];
assign  up        = ~KEY[1];
assign  down      = ~KEY[2];
assign  ready     = ~KEY[3];

assign  {LEDR[9], LEDR[8]} = ir_in;
                                
bin2bcd_decoder u_bin2bcd_decoder(
                                  .clk(clk), 
                                  .reset_n(resetn), 
                                  .decode('1), 
                                  .bin_in(bin_in), 
                                  .bcd_out(bcd_out)
                                  );
                                  
vjtag u_vjtag (
                    .tdi                (tdi),  // jtag.tdi
                    .tdo                (tdo),  //.tdo
                    .ir_in              (ir_in),  //.ir_in
                    .ir_out             (),  //.ir_out
                    .virtual_state_cdr  (virtual_state_cdr),  //.virtual_state_cdr
                    .virtual_state_sdr  (virtual_state_sdr),  //.virtual_state_sdr
                    .virtual_state_e1dr (),  //.virtual_state_e1dr
                    .virtual_state_pdr  (),  //.virtual_state_pdr
                    .virtual_state_e2dr (),  //.virtual_state_e2dr
                    .virtual_state_udr  (virtual_state_udr),  //.virtual_state_udr
                    .virtual_state_cir  (),  //.virtual_state_cir
                    .virtual_state_uir  (),  //.virtual_state_uir
                    .tck                (tck)   //  tck.clk
                    );

vjtag_interface  #(.DW(DW)) u_vjtag_interface (
                        .tck(tck),
                        .tdi(tdi),
                        .aclr(resetn),
                        .ir_in(ir_in),
                        .v_sdr(virtual_state_sdr),
                        .v_cdr(virtual_state_cdr),
                        .udr(virtual_state_udr),
                        .data_out(jtag_data),
                        .data_in(counter),
                        .tdo(tdo),
                        
                        .debug_dr2(LEDR[7:0]),
                       );
							  
							  
//ram
/*ram u_ram (
    .address(ram_addr),
    .clock(clk),
    .data(ram_data_in),
    .wren(ram_wren),
    .q(ram_data_out)
);
*/

bcd2seven_seg u_bcd2seven_seg_0(bcd_out[3:0], HEX0);

bcd2seven_seg u_bcd2seven_seg_1(bcd_out[7:4], HEX1);

bcd2seven_seg u_bcd2seven_seg_2(bcd_out[11:8], HEX2);

bcd2seven_seg u_bcd2seven_seg_3(bcd_out[15:12], HEX3);


always_ff @(posedge clk or negedge resetn) begin
    if(!resetn) begin
        counter <= '0;
    end
    else begin
        if(configure) begin
            counter <= jtag_data;
        end
        else begin
            if(up) begin
                counter <= counter + 1'b1;
            end
            if(down) begin
                counter <= counter - 1'b1;
            end
        end
    end
end
endmodule
